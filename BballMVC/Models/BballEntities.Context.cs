//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BballMVC.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities2 : DbContext
    {
        public Entities2()
            : base("name=Entities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AdjustmentOTsideLine> AdjustmentOTsideLines { get; set; }
        public virtual DbSet<Adjustment> Adjustments { get; set; }
        public virtual DbSet<AnalysisResult> AnalysisResults { get; set; }
        public virtual DbSet<BoxScore> BoxScores { get; set; }
        public virtual DbSet<BoxScoresAdjusted> BoxScoresAdjusteds { get; set; }
        public virtual DbSet<BoxScoresLast5Min> BoxScoresLast5Min { get; set; }
        public virtual DbSet<BoxScoresSeed> BoxScoresSeeds { get; set; }
        public virtual DbSet<LeagueInfo> LeagueInfoes { get; set; }
        public virtual DbSet<Line> Lines { get; set; }
        public virtual DbSet<ParmTable> ParmTables { get; set; }
        public virtual DbSet<SeasonInfo> SeasonInfoes { get; set; }
        public virtual DbSet<Team> Teams { get; set; }
        public virtual DbSet<TeamStatsAverage> TeamStatsAverages { get; set; }
        public virtual DbSet<TodaysMatchupsResult> TodaysMatchupsResults { get; set; }
        public virtual DbSet<TTILog> TTILogs { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Rotation> Rotation { get; set; }
        public virtual DbSet<TodaysPlays> TodaysPlays { get; set; }
        public virtual DbSet<AdjustmentsCodes> AdjustmentsCodes { get; set; }
        public virtual DbSet<DailySummary> DailySummary { get; set; }
        public virtual DbSet<TeamStrength> TeamStrength { get; set; }
        public virtual DbSet<vPostGameAnalysis> vPostGameAnalysis { get; set; }
        public virtual DbSet<UserLeagueParms> UserLeagueParms { get; set; }
        public virtual DbSet<TodaysMatchups> TodaysMatchups { get; set; }
    
        [DbFunction("Entities2", "udfQueryAdjustmentsByTeamTotal")]
        public virtual IQueryable<udfQueryAdjustmentsByTeamTotal_Result> udfQueryAdjustmentsByTeamTotal(Nullable<System.DateTime> gameDate, string leagueName)
        {
            var gameDateParameter = gameDate.HasValue ?
                new ObjectParameter("GameDate", gameDate) :
                new ObjectParameter("GameDate", typeof(System.DateTime));
    
            var leagueNameParameter = leagueName != null ?
                new ObjectParameter("LeagueName", leagueName) :
                new ObjectParameter("LeagueName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<udfQueryAdjustmentsByTeamTotal_Result>("[Entities2].[udfQueryAdjustmentsByTeamTotal](@GameDate, @LeagueName)", gameDateParameter, leagueNameParameter);
        }
    
        [DbFunction("Entities2", "xudfDailyParms")]
        public virtual IQueryable<xudfDailyParms_Result> xudfDailyParms(Nullable<System.DateTime> gameDate, string leagueName, string userName)
        {
            var gameDateParameter = gameDate.HasValue ?
                new ObjectParameter("GameDate", gameDate) :
                new ObjectParameter("GameDate", typeof(System.DateTime));
    
            var leagueNameParameter = leagueName != null ?
                new ObjectParameter("LeagueName", leagueName) :
                new ObjectParameter("LeagueName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<xudfDailyParms_Result>("[Entities2].[xudfDailyParms](@GameDate, @LeagueName, @UserName)", gameDateParameter, leagueNameParameter, userNameParameter);
        }
    
        public virtual int f__uspTemplate(Nullable<bool> parms)
        {
            var parmsParameter = parms.HasValue ?
                new ObjectParameter("parms", parms) :
                new ObjectParameter("parms", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f__uspTemplate", parmsParameter);
        }
    
        public virtual ObjectResult<string> spTeamLookup(Nullable<System.DateTime> startDate, string leagueName, string teamSource, string teamName)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var leagueNameParameter = leagueName != null ?
                new ObjectParameter("LeagueName", leagueName) :
                new ObjectParameter("LeagueName", typeof(string));
    
            var teamSourceParameter = teamSource != null ?
                new ObjectParameter("TeamSource", teamSource) :
                new ObjectParameter("TeamSource", typeof(string));
    
            var teamNameParameter = teamName != null ?
                new ObjectParameter("TeamName", teamName) :
                new ObjectParameter("TeamName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spTeamLookup", startDateParameter, leagueNameParameter, teamSourceParameter, teamNameParameter);
        }
    
        public virtual ObjectResult<string> TeamLookup(Nullable<System.DateTime> startDate, string leagueName, string teamSource, string teamName)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var leagueNameParameter = leagueName != null ?
                new ObjectParameter("LeagueName", leagueName) :
                new ObjectParameter("LeagueName", typeof(string));
    
            var teamSourceParameter = teamSource != null ?
                new ObjectParameter("TeamSource", teamSource) :
                new ObjectParameter("TeamSource", typeof(string));
    
            var teamNameParameter = teamName != null ?
                new ObjectParameter("TeamName", teamName) :
                new ObjectParameter("TeamName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("TeamLookup", startDateParameter, leagueNameParameter, teamSourceParameter, teamNameParameter);
        }
    
        public virtual int TeamLookupByCovers(string leagueName, Nullable<System.DateTime> gameDate, string teamSearchArg)
        {
            var leagueNameParameter = leagueName != null ?
                new ObjectParameter("LeagueName", leagueName) :
                new ObjectParameter("LeagueName", typeof(string));
    
            var gameDateParameter = gameDate.HasValue ?
                new ObjectParameter("GameDate", gameDate) :
                new ObjectParameter("GameDate", typeof(System.DateTime));
    
            var teamSearchArgParameter = teamSearchArg != null ?
                new ObjectParameter("TeamSearchArg", teamSearchArg) :
                new ObjectParameter("TeamSearchArg", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("TeamLookupByCovers", leagueNameParameter, gameDateParameter, teamSearchArgParameter);
        }
    
        public virtual ObjectResult<TeamLookupSourceToSource_Result> TeamLookupSourceToSource(Nullable<System.DateTime> startDate, string leagueName, string teamSourceFrom, string teamSourceTo, string teamName)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var leagueNameParameter = leagueName != null ?
                new ObjectParameter("LeagueName", leagueName) :
                new ObjectParameter("LeagueName", typeof(string));
    
            var teamSourceFromParameter = teamSourceFrom != null ?
                new ObjectParameter("TeamSourceFrom", teamSourceFrom) :
                new ObjectParameter("TeamSourceFrom", typeof(string));
    
            var teamSourceToParameter = teamSourceTo != null ?
                new ObjectParameter("TeamSourceTo", teamSourceTo) :
                new ObjectParameter("TeamSourceTo", typeof(string));
    
            var teamNameParameter = teamName != null ?
                new ObjectParameter("TeamName", teamName) :
                new ObjectParameter("TeamName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TeamLookupSourceToSource_Result>("TeamLookupSourceToSource", startDateParameter, leagueNameParameter, teamSourceFromParameter, teamSourceToParameter, teamNameParameter);
        }
    
        public virtual ObjectResult<string> TeamLookupTeamNameByTeamNameInDatabase(Nullable<System.DateTime> startDate, string leagueName, string teamSource, string teamNameInDatabase)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var leagueNameParameter = leagueName != null ?
                new ObjectParameter("LeagueName", leagueName) :
                new ObjectParameter("LeagueName", typeof(string));
    
            var teamSourceParameter = teamSource != null ?
                new ObjectParameter("TeamSource", teamSource) :
                new ObjectParameter("TeamSource", typeof(string));
    
            var teamNameInDatabaseParameter = teamNameInDatabase != null ?
                new ObjectParameter("TeamNameInDatabase", teamNameInDatabase) :
                new ObjectParameter("TeamNameInDatabase", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("TeamLookupTeamNameByTeamNameInDatabase", startDateParameter, leagueNameParameter, teamSourceParameter, teamNameInDatabaseParameter);
        }
    
        public virtual ObjectResult<uspCalcPtPct_Result> uspCalcPtPct(Nullable<System.DateTime> gameDate, string leagueName, string team, string venue)
        {
            var gameDateParameter = gameDate.HasValue ?
                new ObjectParameter("GameDate", gameDate) :
                new ObjectParameter("GameDate", typeof(System.DateTime));
    
            var leagueNameParameter = leagueName != null ?
                new ObjectParameter("LeagueName", leagueName) :
                new ObjectParameter("LeagueName", typeof(string));
    
            var teamParameter = team != null ?
                new ObjectParameter("Team", team) :
                new ObjectParameter("Team", typeof(string));
    
            var venueParameter = venue != null ?
                new ObjectParameter("Venue", venue) :
                new ObjectParameter("Venue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspCalcPtPct_Result>("uspCalcPtPct", gameDateParameter, leagueNameParameter, teamParameter, venueParameter);
        }
    
        public virtual ObjectResult<uspCalcTodaysMatchups_Result> uspCalcTodaysMatchups(string userName, string leagueName, Nullable<System.DateTime> gameDate, Nullable<int> display)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var leagueNameParameter = leagueName != null ?
                new ObjectParameter("LeagueName", leagueName) :
                new ObjectParameter("LeagueName", typeof(string));
    
            var gameDateParameter = gameDate.HasValue ?
                new ObjectParameter("GameDate", gameDate) :
                new ObjectParameter("GameDate", typeof(System.DateTime));
    
            var displayParameter = display.HasValue ?
                new ObjectParameter("Display", display) :
                new ObjectParameter("Display", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspCalcTodaysMatchups_Result>("uspCalcTodaysMatchups", userNameParameter, leagueNameParameter, gameDateParameter, displayParameter);
        }
    
        public virtual ObjectResult<uspCalcTodaysMatchupsx_Result> uspCalcTodaysMatchupsx(string userName, string leagueName, Nullable<System.DateTime> gameDate, Nullable<bool> display)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var leagueNameParameter = leagueName != null ?
                new ObjectParameter("LeagueName", leagueName) :
                new ObjectParameter("LeagueName", typeof(string));
    
            var gameDateParameter = gameDate.HasValue ?
                new ObjectParameter("GameDate", gameDate) :
                new ObjectParameter("GameDate", typeof(System.DateTime));
    
            var displayParameter = display.HasValue ?
                new ObjectParameter("Display", display) :
                new ObjectParameter("Display", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspCalcTodaysMatchupsx_Result>("uspCalcTodaysMatchupsx", userNameParameter, leagueNameParameter, gameDateParameter, displayParameter);
        }
    
        public virtual int uspInsertAdjustments(string leagueName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<System.DateTime> tS, string team, string adjustmentDesc, Nullable<double> adjustmentAmount, string player, string description)
        {
            var leagueNameParameter = leagueName != null ?
                new ObjectParameter("LeagueName", leagueName) :
                new ObjectParameter("LeagueName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var tSParameter = tS.HasValue ?
                new ObjectParameter("TS", tS) :
                new ObjectParameter("TS", typeof(System.DateTime));
    
            var teamParameter = team != null ?
                new ObjectParameter("Team", team) :
                new ObjectParameter("Team", typeof(string));
    
            var adjustmentDescParameter = adjustmentDesc != null ?
                new ObjectParameter("AdjustmentDesc", adjustmentDesc) :
                new ObjectParameter("AdjustmentDesc", typeof(string));
    
            var adjustmentAmountParameter = adjustmentAmount.HasValue ?
                new ObjectParameter("AdjustmentAmount", adjustmentAmount) :
                new ObjectParameter("AdjustmentAmount", typeof(double));
    
            var playerParameter = player != null ?
                new ObjectParameter("Player", player) :
                new ObjectParameter("Player", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertAdjustments", leagueNameParameter, startDateParameter, endDateParameter, tSParameter, teamParameter, adjustmentDescParameter, adjustmentAmountParameter, playerParameter, descriptionParameter);
        }
    
        public virtual int uspInsertAnalysisResults(string runID, string userName, string leagueName, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<double> gameDefaultOTamt, string description)
        {
            var runIDParameter = runID != null ?
                new ObjectParameter("RunID", runID) :
                new ObjectParameter("RunID", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var leagueNameParameter = leagueName != null ?
                new ObjectParameter("LeagueName", leagueName) :
                new ObjectParameter("LeagueName", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var gameDefaultOTamtParameter = gameDefaultOTamt.HasValue ?
                new ObjectParameter("GameDefaultOTamt", gameDefaultOTamt) :
                new ObjectParameter("GameDefaultOTamt", typeof(double));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertAnalysisResults", runIDParameter, userNameParameter, leagueNameParameter, startDateParameter, endDateParameter, startTimeParameter, endTimeParameter, gameDefaultOTamtParameter, descriptionParameter);
        }
    
        public virtual int uspInsertDailySummary(string userName, Nullable<System.DateTime> gameDate, string leagueName, Nullable<System.DateTime> lgAvgStartDate)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var gameDateParameter = gameDate.HasValue ?
                new ObjectParameter("GameDate", gameDate) :
                new ObjectParameter("GameDate", typeof(System.DateTime));
    
            var leagueNameParameter = leagueName != null ?
                new ObjectParameter("LeagueName", leagueName) :
                new ObjectParameter("LeagueName", typeof(string));
    
            var lgAvgStartDateParameter = lgAvgStartDate.HasValue ?
                new ObjectParameter("LgAvgStartDate", lgAvgStartDate) :
                new ObjectParameter("LgAvgStartDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertDailySummary", userNameParameter, gameDateParameter, leagueNameParameter, lgAvgStartDateParameter);
        }
    
        public virtual int uspInsertLine(string leagueName, Nullable<System.DateTime> gameDate, Nullable<int> rotNum, string teamAway, string teamHome, Nullable<double> line, string playType, string playDuration, Nullable<System.DateTime> createDate, string lineSource)
        {
            var leagueNameParameter = leagueName != null ?
                new ObjectParameter("LeagueName", leagueName) :
                new ObjectParameter("LeagueName", typeof(string));
    
            var gameDateParameter = gameDate.HasValue ?
                new ObjectParameter("GameDate", gameDate) :
                new ObjectParameter("GameDate", typeof(System.DateTime));
    
            var rotNumParameter = rotNum.HasValue ?
                new ObjectParameter("RotNum", rotNum) :
                new ObjectParameter("RotNum", typeof(int));
    
            var teamAwayParameter = teamAway != null ?
                new ObjectParameter("TeamAway", teamAway) :
                new ObjectParameter("TeamAway", typeof(string));
    
            var teamHomeParameter = teamHome != null ?
                new ObjectParameter("TeamHome", teamHome) :
                new ObjectParameter("TeamHome", typeof(string));
    
            var lineParameter = line.HasValue ?
                new ObjectParameter("Line", line) :
                new ObjectParameter("Line", typeof(double));
    
            var playTypeParameter = playType != null ?
                new ObjectParameter("PlayType", playType) :
                new ObjectParameter("PlayType", typeof(string));
    
            var playDurationParameter = playDuration != null ?
                new ObjectParameter("PlayDuration", playDuration) :
                new ObjectParameter("PlayDuration", typeof(string));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var lineSourceParameter = lineSource != null ?
                new ObjectParameter("LineSource", lineSource) :
                new ObjectParameter("LineSource", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertLine", leagueNameParameter, gameDateParameter, rotNumParameter, teamAwayParameter, teamHomeParameter, lineParameter, playTypeParameter, playDurationParameter, createDateParameter, lineSourceParameter);
        }
    
        public virtual int uspInsertLinesFromRotation(Nullable<System.DateTime> gameDate, string leagueName)
        {
            var gameDateParameter = gameDate.HasValue ?
                new ObjectParameter("GameDate", gameDate) :
                new ObjectParameter("GameDate", typeof(System.DateTime));
    
            var leagueNameParameter = leagueName != null ?
                new ObjectParameter("LeagueName", leagueName) :
                new ObjectParameter("LeagueName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertLinesFromRotation", gameDateParameter, leagueNameParameter);
        }
    
        public virtual int uspInsertTodaysMatchupsResults(string userName, Nullable<System.DateTime> gameDate, string leagueName)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var gameDateParameter = gameDate.HasValue ?
                new ObjectParameter("GameDate", gameDate) :
                new ObjectParameter("GameDate", typeof(System.DateTime));
    
            var leagueNameParameter = leagueName != null ?
                new ObjectParameter("LeagueName", leagueName) :
                new ObjectParameter("LeagueName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspInsertTodaysMatchupsResults", userNameParameter, gameDateParameter, leagueNameParameter);
        }
    
        public virtual ObjectResult<uspQueryAdjustmentCodes_Result> uspQueryAdjustmentCodes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspQueryAdjustmentCodes_Result>("uspQueryAdjustmentCodes");
        }
    
        public virtual ObjectResult<uspQueryAdjustmentInfo_Result> uspQueryAdjustmentInfo(Nullable<System.DateTime> gameDate, string leagueName)
        {
            var gameDateParameter = gameDate.HasValue ?
                new ObjectParameter("GameDate", gameDate) :
                new ObjectParameter("GameDate", typeof(System.DateTime));
    
            var leagueNameParameter = leagueName != null ?
                new ObjectParameter("LeagueName", leagueName) :
                new ObjectParameter("LeagueName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspQueryAdjustmentInfo_Result>("uspQueryAdjustmentInfo", gameDateParameter, leagueNameParameter);
        }
    
        public virtual ObjectResult<uspQueryAdjustments_Result> uspQueryAdjustments(Nullable<System.DateTime> gameDate, string leagueName)
        {
            var gameDateParameter = gameDate.HasValue ?
                new ObjectParameter("GameDate", gameDate) :
                new ObjectParameter("GameDate", typeof(System.DateTime));
    
            var leagueNameParameter = leagueName != null ?
                new ObjectParameter("LeagueName", leagueName) :
                new ObjectParameter("LeagueName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspQueryAdjustments_Result>("uspQueryAdjustments", gameDateParameter, leagueNameParameter);
        }
    
        public virtual ObjectResult<uspQueryAdjustmentsByTeamTotal_Result> uspQueryAdjustmentsByTeamTotal(Nullable<System.DateTime> gameDate, string leagueName)
        {
            var gameDateParameter = gameDate.HasValue ?
                new ObjectParameter("GameDate", gameDate) :
                new ObjectParameter("GameDate", typeof(System.DateTime));
    
            var leagueNameParameter = leagueName != null ?
                new ObjectParameter("LeagueName", leagueName) :
                new ObjectParameter("LeagueName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspQueryAdjustmentsByTeamTotal_Result>("uspQueryAdjustmentsByTeamTotal", gameDateParameter, leagueNameParameter);
        }
    
        public virtual ObjectResult<uspQueryAdjustmentsForTodaysMatchups_Result> uspQueryAdjustmentsForTodaysMatchups(Nullable<System.DateTime> gameDate, string leagueName)
        {
            var gameDateParameter = gameDate.HasValue ?
                new ObjectParameter("GameDate", gameDate) :
                new ObjectParameter("GameDate", typeof(System.DateTime));
    
            var leagueNameParameter = leagueName != null ?
                new ObjectParameter("LeagueName", leagueName) :
                new ObjectParameter("LeagueName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspQueryAdjustmentsForTodaysMatchups_Result>("uspQueryAdjustmentsForTodaysMatchups", gameDateParameter, leagueNameParameter);
        }
    
        public virtual ObjectResult<uspQueryAnalysisResults_Result> uspQueryAnalysisResults(string runID)
        {
            var runIDParameter = runID != null ?
                new ObjectParameter("RunID", runID) :
                new ObjectParameter("RunID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspQueryAnalysisResults_Result>("uspQueryAnalysisResults", runIDParameter);
        }
    
        public virtual ObjectResult<uspQueryCalcTeamStrength_Result> uspQueryCalcTeamStrength(string userName, Nullable<System.DateTime> gameDate, string leagueName, string team, string venue, string subSeason, Nullable<double> tmStrAdjPct, Nullable<double> bxScLinePct, Nullable<double> avgLgScoreAway, Nullable<double> avgLgScoreHome, Nullable<int> gamesBack)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var gameDateParameter = gameDate.HasValue ?
                new ObjectParameter("GameDate", gameDate) :
                new ObjectParameter("GameDate", typeof(System.DateTime));
    
            var leagueNameParameter = leagueName != null ?
                new ObjectParameter("LeagueName", leagueName) :
                new ObjectParameter("LeagueName", typeof(string));
    
            var teamParameter = team != null ?
                new ObjectParameter("Team", team) :
                new ObjectParameter("Team", typeof(string));
    
            var venueParameter = venue != null ?
                new ObjectParameter("Venue", venue) :
                new ObjectParameter("Venue", typeof(string));
    
            var subSeasonParameter = subSeason != null ?
                new ObjectParameter("SubSeason", subSeason) :
                new ObjectParameter("SubSeason", typeof(string));
    
            var tmStrAdjPctParameter = tmStrAdjPct.HasValue ?
                new ObjectParameter("TmStrAdjPct", tmStrAdjPct) :
                new ObjectParameter("TmStrAdjPct", typeof(double));
    
            var bxScLinePctParameter = bxScLinePct.HasValue ?
                new ObjectParameter("BxScLinePct", bxScLinePct) :
                new ObjectParameter("BxScLinePct", typeof(double));
    
            var avgLgScoreAwayParameter = avgLgScoreAway.HasValue ?
                new ObjectParameter("AvgLgScoreAway", avgLgScoreAway) :
                new ObjectParameter("AvgLgScoreAway", typeof(double));
    
            var avgLgScoreHomeParameter = avgLgScoreHome.HasValue ?
                new ObjectParameter("AvgLgScoreHome", avgLgScoreHome) :
                new ObjectParameter("AvgLgScoreHome", typeof(double));
    
            var gamesBackParameter = gamesBack.HasValue ?
                new ObjectParameter("GamesBack", gamesBack) :
                new ObjectParameter("GamesBack", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspQueryCalcTeamStrength_Result>("uspQueryCalcTeamStrength", userNameParameter, gameDateParameter, leagueNameParameter, teamParameter, venueParameter, subSeasonParameter, tmStrAdjPctParameter, bxScLinePctParameter, avgLgScoreAwayParameter, avgLgScoreHomeParameter, gamesBackParameter);
        }
    
        public virtual ObjectResult<uspQueryLeagueAverages_Result> uspQueryLeagueAverages(Nullable<System.DateTime> gameDate, string leagueName, string season, string subSeason, string userName)
        {
            var gameDateParameter = gameDate.HasValue ?
                new ObjectParameter("GameDate", gameDate) :
                new ObjectParameter("GameDate", typeof(System.DateTime));
    
            var leagueNameParameter = leagueName != null ?
                new ObjectParameter("LeagueName", leagueName) :
                new ObjectParameter("LeagueName", typeof(string));
    
            var seasonParameter = season != null ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(string));
    
            var subSeasonParameter = subSeason != null ?
                new ObjectParameter("SubSeason", subSeason) :
                new ObjectParameter("SubSeason", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspQueryLeagueAverages_Result>("uspQueryLeagueAverages", gameDateParameter, leagueNameParameter, seasonParameter, subSeasonParameter, userNameParameter);
        }
    
        public virtual ObjectResult<uspQuerySeasonInfo_Result> uspQuerySeasonInfo(Nullable<System.DateTime> gameDate, string leagueName)
        {
            var gameDateParameter = gameDate.HasValue ?
                new ObjectParameter("GameDate", gameDate) :
                new ObjectParameter("GameDate", typeof(System.DateTime));
    
            var leagueNameParameter = leagueName != null ?
                new ObjectParameter("LeagueName", leagueName) :
                new ObjectParameter("LeagueName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspQuerySeasonInfo_Result>("uspQuerySeasonInfo", gameDateParameter, leagueNameParameter);
        }
    
        public virtual ObjectResult<string> uspQueryTeams(string leagueName, Nullable<System.DateTime> gameDate)
        {
            var leagueNameParameter = leagueName != null ?
                new ObjectParameter("LeagueName", leagueName) :
                new ObjectParameter("LeagueName", typeof(string));
    
            var gameDateParameter = gameDate.HasValue ?
                new ObjectParameter("GameDate", gameDate) :
                new ObjectParameter("GameDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("uspQueryTeams", leagueNameParameter, gameDateParameter);
        }
    
        public virtual int uspUpdateAdjustments(Nullable<System.DateTime> gameDate)
        {
            var gameDateParameter = gameDate.HasValue ?
                new ObjectParameter("GameDate", gameDate) :
                new ObjectParameter("GameDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateAdjustments", gameDateParameter);
        }
    
        public virtual int uspUpdateBoxScoresSeeds(string leagueName, string season, string userName)
        {
            var leagueNameParameter = leagueName != null ?
                new ObjectParameter("LeagueName", leagueName) :
                new ObjectParameter("LeagueName", typeof(string));
    
            var seasonParameter = season != null ?
                new ObjectParameter("Season", season) :
                new ObjectParameter("Season", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateBoxScoresSeeds", leagueNameParameter, seasonParameter, userNameParameter);
        }
    
        public virtual int uspUpdateYesterdaysAdjustments()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspUpdateYesterdaysAdjustments");
        }
    
        public virtual int uspVerifyBoxscoresUpdated()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspVerifyBoxscoresUpdated");
        }
    }
}
